{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".circle_reactGradientProgress__1_0UG {\\n  display: inline-block;\\n  border-radius: 100%;\\n  position: relative;\\n}\\n.circle_reactGradientProgressPercentage__3mR2b {\\n  position: absolute;\\n  height:100%;\\n  width: 100%;\\n  margin: 0px auto;\\n}\\n\\n.circle_reactGradientProgressPercentageSpan__1HdhL {\\n  position: absolute;\\n  height:100%;\\n  width: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-content: center;\\n  flex-direction: column;\\n  text-align: center;\\n}\\n\\n.circle_progressCircleBar__1IKUZ {\\n  transform: rotate(-90deg);\\n  transform-origin: 50% 50%;\\n}\\n\";\nvar styles = {\n  \"reactGradientProgress\": \"circle_reactGradientProgress__1_0UG\",\n  \"reactGradientProgressPercentage\": \"circle_reactGradientProgressPercentage__3mR2b\",\n  \"reactGradientProgressPercentageSpan\": \"circle_reactGradientProgressPercentageSpan__1HdhL\",\n  \"progressCircleBar\": \"circle_progressCircleBar__1IKUZ\"\n};\nstyleInject(css);\n\nvar CircleProgress = function CircleProgress(_ref) {\n  var percentage = _ref.percentage,\n      width = _ref.width,\n      strokeWidth = _ref.strokeWidth,\n      fontSize = _ref.fontSize,\n      fontColor = _ref.fontColor,\n      fontFamily = _ref.fontFamily,\n      primaryColor = _ref.primaryColor,\n      secondaryColor = _ref.secondaryColor,\n      fill = _ref.fill,\n      hidePercentageText = _ref.hidePercentageText,\n      strokeLinecap = _ref.strokeLinecap;\n  var PI = 3.14;\n  var R = width / 2 - strokeWidth * 2;\n  var circumference = 2 * PI * R;\n  var offset = circumference - percentage / 100 * circumference;\n  var gradientId = ('' + primaryColor[0] + primaryColor[1]).replace(/#/g, '');\n  return React.createElement('div', {\n    className: styles.reactGradientProgress,\n    style: {\n      height: width + 'px',\n      width: width + 'px'\n    }\n  }, !hidePercentageText ? React.createElement('div', {\n    id: styles.reactGradientProgressPercentage\n  }, React.createElement('span', {\n    className: styles.reactGradientProgressPercentageSpan,\n    style: {\n      fontSize: fontSize,\n      fontFamily: fontFamily,\n      color: fontColor\n    }\n  }, percentage, '%')) : null, React.createElement('svg', {\n    width: '100%',\n    height: '100%',\n    version: '1.1',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, React.createElement('linearGradient', {\n    id: gradientId,\n    x1: '0%',\n    y1: '0%',\n    x2: '100%',\n    y2: '100%'\n  }, React.createElement('stop', {\n    offset: '0%',\n    stopColor: primaryColor[0]\n  }), React.createElement('stop', {\n    offset: '100%',\n    stopColor: primaryColor[1]\n  })), React.createElement('circle', {\n    strokeWidth: strokeWidth,\n    fill: 'transparent',\n    r: R,\n    cx: width / 2,\n    cy: width / 2,\n    stroke: secondaryColor,\n    strokeDasharray: circumference + ' ' + circumference\n  }), React.createElement('circle', {\n    className: styles.progressCircleBar,\n    strokeWidth: strokeWidth,\n    fill: fill,\n    r: R,\n    cx: width / 2,\n    cy: width / 2,\n    stroke: 'url(#' + gradientId + ')',\n    strokeLinecap: strokeLinecap,\n    strokeDasharray: circumference + ' ' + circumference,\n    strokeDashoffset: offset\n  })));\n};\n\nCircleProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n  width: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  strokeLinecap: PropTypes.oneOf(['round', 'square', 'butt']),\n  fontSize: PropTypes.string,\n  fontColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  primaryColor: PropTypes.array,\n  secondaryColor: PropTypes.string,\n  fill: PropTypes.string,\n  hidePercentageText: PropTypes.bool\n};\nCircleProgress.defaultProps = {\n  width: 200,\n  strokeWidth: 5,\n  strokeLinecap: 'round',\n  fontSize: 'inherit',\n  fontColor: 'inherit',\n  fontFamily: 'inherit',\n  primaryColor: ['#00BBFF', '#92d7f1'],\n  secondaryColor: 'transparent',\n  fill: 'transparent'\n};\nexport { CircleProgress };","map":{"version":3,"sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/circle.js"],"names":["CircleProgress","percentage","width","strokeWidth","fontSize","fontColor","fontFamily","primaryColor","secondaryColor","fill","hidePercentageText","strokeLinecap","PI","R","circumference","offset","gradientId","styles","PropTypes","bool"],"mappings":"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","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './circle.css'\n\nconst CircleProgress = ({\n  percentage,\n  width,\n  strokeWidth,\n  fontSize,\n  fontColor,\n  fontFamily,\n  primaryColor,\n  secondaryColor,\n  fill,\n  hidePercentageText,\n  strokeLinecap,\n}) => {\n  const PI = 3.14\n\n  const R = (width / 2) - (strokeWidth * 2)\n  let circumference = 2 * PI * R\n  let offset = circumference - percentage / 100 * circumference\n  let gradientId = `${primaryColor[0]}${primaryColor[1]}`.replace(/#/g, '')\n  return (\n    <div\n      className={styles.reactGradientProgress}\n      style={{\n        height: `${width}px`,\n        width: `${width}px`,\n      }}\n    >\n      {!hidePercentageText ?\n        <div id={styles.reactGradientProgressPercentage}>\n          <span\n            className={styles.reactGradientProgressPercentageSpan}\n            style={{\n              fontSize,\n              fontFamily,\n              color: fontColor,\n            }}\n          >\n            {percentage}%\n          </span>\n        </div>\n        : null\n      }\n\n      <svg\n        width='100%'\n        height='100%'\n        version='1.1'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <linearGradient\n          id={gradientId}\n          x1='0%'\n          y1='0%'\n          x2='100%'\n          y2='100%'\n        >\n          <stop offset='0%' stopColor={primaryColor[0]}/>\n          <stop offset='100%' stopColor={primaryColor[1]}/>\n        </linearGradient>\n        <circle\n          strokeWidth={strokeWidth}\n          fill='transparent'\n          r={R}\n          cx={width / 2}\n          cy={width / 2}\n          stroke={secondaryColor}\n          strokeDasharray={`${circumference} ${circumference}`}\n        />\n        <circle\n          className={styles.progressCircleBar}\n          strokeWidth={strokeWidth}\n          fill={fill}\n          r={R}\n          cx={width / 2}\n          cy={width / 2}\n          stroke={`url(#${gradientId})`}\n          strokeLinecap={strokeLinecap}\n          strokeDasharray={`${circumference} ${circumference}`}\n          strokeDashoffset={offset}\n        />\n      </svg>\n    </div>\n  )\n}\n\nCircleProgress.propTypes = {\n  percentage: PropTypes.number.isRequired,\n  width: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  strokeLinecap: PropTypes.oneOf(['round', 'square', 'butt']),\n  fontSize: PropTypes.string,\n  fontColor: PropTypes.string,\n  fontFamily: PropTypes.string,\n  primaryColor: PropTypes.array,\n  secondaryColor: PropTypes.string,\n  fill: PropTypes.string,\n  hidePercentageText: PropTypes.bool,\n}\n\nCircleProgress.defaultProps = {\n  width: 200,\n  strokeWidth: 5,\n  strokeLinecap: 'round',\n  fontSize: 'inherit',\n  fontColor: 'inherit',\n  fontFamily: 'inherit',\n  primaryColor: ['#00BBFF', '#92d7f1'],\n  secondaryColor: 'transparent',\n  fill: 'transparent',\n}\n\nexport default CircleProgress\n"]},"metadata":{},"sourceType":"module"}